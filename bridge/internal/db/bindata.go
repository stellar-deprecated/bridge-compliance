// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/01_init.sql
// migrations/02_payment_id.sql
// migrations/03_transaction_id.sql
// migrations/04_table_names.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2c\x49\x2d\x2e\xd1\x2b\x2e\xcc\xe1\x02\x04\x00\x00\xff\xff\xff\x32\xce\x0c\x0b\x00\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 11, mode: os.FileMode(420), modTime: time.Unix(1524673301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations01_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x4f\xfa\x40\x10\xc5\xef\xfb\x29\xe6\x08\xf9\xff\x49\xd4\x08\x17\x4e\x55\x6a\x42\xac\x80\xb5\x3d\x70\x6a\x86\xdd\x49\x9d\xd8\xee\x36\xbb\x53\xc4\x6f\x6f\x30\x51\xda\x82\x9e\x7f\x2f\x33\xef\xbd\x99\xc9\x04\xfe\xd5\x5c\x7a\x14\x82\xbc\x51\xf7\x69\x1c\x65\x31\x64\xd1\x5d\x12\x43\x4a\x9a\x78\x4f\x66\x83\x1f\x35\x59\x81\x91\x02\x60\x03\x3b\x2e\x03\x79\xc6\xea\xbf\x02\x70\x0d\x79\x14\x76\xb6\x60\x03\x7b\xf4\xfa\x15\xfd\xe8\x66\x3a\x1d\x43\xbe\x5a\x3e\xe7\x31\xac\xd6\x19\xac\xf2\x24\x39\x8a\x1b\xef\x34\x85\x40\xa6\x40\x01\xe1\x9a\x82\x60\xdd\xf4\x25\x58\xb2\x2d\x0b\x71\x6f\x64\xfb\xf3\xba\xaa\x20\x28\x6d\xf8\x9d\x6f\xd2\xe5\x53\x94\x6e\xe1\x31\xde\xc2\x88\xcd\x58\x8d\xe7\xaa\x9f\xed\x85\xac\x64\x1e\x6d\x40\x7d\x74\xff\x9d\xed\x14\x4c\x4e\xb0\x1b\x6d\x76\xdb\xd9\x04\xe7\x56\xae\xaf\x06\x4e\x5d\xeb\x35\xfd\xe0\xe9\x6c\x80\xdb\x5d\xcd\x22\x7f\x35\x12\x5a\xad\x89\xcc\x50\xb2\x88\x1f\xa2\x3c\x39\xc9\x2a\x32\x25\xf9\xe3\x71\xd8\xca\x19\x25\xbb\xa7\xca\x35\x54\x1c\x8c\x07\xa1\x83\xf4\x56\x78\x0a\x6d\x25\x5f\xac\x57\xe9\x70\xca\xc5\x5a\xbb\x1f\xb4\x70\xef\x56\x2d\xd2\xf5\xe6\xf2\x07\xcd\xbb\x6c\x70\x81\xb9\xfa\x0c\x00\x00\xff\xff\x4d\x61\x55\x6b\x8b\x02\x00\x00")

func migrations01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initSql,
		"migrations/01_init.sql",
	)
}

func migrations01_initSql() (*asset, error) {
	bytes, err := migrations01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_init.sql", size: 651, mode: os.FileMode(420), modTime: time.Unix(1524490129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations02_payment_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\x31\x0b\xc2\x30\x10\x05\xe0\x3d\xbf\xe2\xc6\x16\xe9\x22\x74\xea\x74\x36\x11\x0b\x21\xd5\xf4\xe2\x5a\x82\x06\xc9\xd0\x6b\xad\x29\xe2\xbf\x17\x5c\xec\xa4\xe3\xe3\xc1\xf7\x5e\x51\xc0\x66\x88\xb7\xd9\xa7\x00\x6e\x12\xa8\x49\x59\x20\xdc\x69\x05\x5d\xe0\x44\xb3\xe7\x87\xbf\xa4\x38\x32\xa0\x94\x30\xf9\xd7\x10\x38\xf5\xf1\x0a\x67\xb4\xf5\x01\x6d\xb6\x2d\xcb\x1c\x8c\xd3\x1a\xa4\xda\xa3\xd3\xf4\x09\xd5\x5f\xaa\x6e\x4d\x47\x16\x1b\x43\x2b\xb5\x5f\x38\xde\x97\x00\xce\x34\x27\xa7\x20\xfb\x36\x79\x25\xc4\xfa\xac\x1c\x9f\xfc\x73\x43\xda\xf6\xb8\x92\x2b\xf1\x0e\x00\x00\xff\xff\xd0\xf6\xe1\x10\xeb\x00\x00\x00")

func migrations02_payment_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations02_payment_idSql,
		"migrations/02_payment_id.sql",
	)
}

func migrations02_payment_idSql() (*asset, error) {
	bytes, err := migrations02_payment_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/02_payment_id.sql", size: 235, mode: os.FileMode(420), modTime: time.Unix(1524490129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations03_transaction_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x08\x4a\x4d\x4e\xcd\x2c\x4b\x4d\x09\x48\xac\xcc\x4d\xcd\x2b\x51\x70\x74\x71\x51\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x8b\xcf\x4c\x51\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x33\xd1\x54\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\xf7\xd3\x77\x54\xb7\xe6\xe2\x42\x36\xd9\x25\xbf\x3c\x0f\xaf\xd9\x2e\x41\xfe\x01\x68\x86\x5b\x73\x01\x02\x00\x00\xff\xff\x95\xd0\x87\x98\x9c\x00\x00\x00")

func migrations03_transaction_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations03_transaction_idSql,
		"migrations/03_transaction_id.sql",
	)
}

func migrations03_transaction_idSql() (*asset, error) {
	bytes, err := migrations03_transaction_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/03_transaction_id.sql", size: 156, mode: os.FileMode(420), modTime: time.Unix(1524490129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations04_table_namesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x08\x4a\x4d\x4e\xcd\x2c\x4b\x4d\x09\x48\xac\xcc\x4d\xcd\x2b\x51\x08\x72\xf5\x73\xf4\x75\x55\x08\xf1\x57\x28\x82\xca\xc4\x17\x40\xa4\xac\x51\xf4\x05\xa7\xe6\x95\x84\x14\x25\xe6\x15\x27\x26\x97\x64\xe6\xe7\x21\xe9\x2b\x4e\xcd\x2b\x89\x2f\x41\x48\x59\x73\x71\x21\xdb\xef\x92\x5f\x9e\x87\x62\x12\xba\x3d\x48\x46\xa1\x39\x0e\xd5\x05\xe8\xf6\x20\xe9\x43\x73\x9c\x35\x17\x20\x00\x00\xff\xff\xb7\xf3\x31\x25\x01\x01\x00\x00")

func migrations04_table_namesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations04_table_namesSql,
		"migrations/04_table_names.sql",
	)
}

func migrations04_table_namesSql() (*asset, error) {
	bytes, err := migrations04_table_namesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/04_table_names.sql", size: 257, mode: os.FileMode(420), modTime: time.Unix(1524490129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/01_init.sql": migrations01_initSql,
	"migrations/02_payment_id.sql": migrations02_payment_idSql,
	"migrations/03_transaction_id.sql": migrations03_transaction_idSql,
	"migrations/04_table_names.sql": migrations04_table_namesSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations01_initSql, map[string]*bintree{}},
		"02_payment_id.sql": &bintree{migrations02_payment_idSql, map[string]*bintree{}},
		"03_transaction_id.sql": &bintree{migrations03_transaction_idSql, map[string]*bintree{}},
		"04_table_names.sql": &bintree{migrations04_table_namesSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

